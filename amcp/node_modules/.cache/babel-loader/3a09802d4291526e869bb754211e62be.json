{"ast":null,"code":"var _jsxFileName = \"/Users/takumifukuo/go/src/github.com/joryulife/AutoMediaCheckPointWeb/amcp/src/files.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { Button } from '@mui/material';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport Collapse from '@mui/material/Collapse';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction login(id) {\n  if (id !== \"\") {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport default function SelectTextFields(props) {\n  _s();\n\n  const [Files, setFiles] = React.useState({\n    movies: [],\n    times: []\n  });\n  const [open, setOpen] = React.useState({\n    time: false,\n    movie: false\n  });\n\n  const handleClick1 = () => {\n    console.log(open);\n    setOpen({ ...open,\n      time: !open.time,\n      movie: open.movie\n    });\n    console.log(open);\n  };\n\n  const handleClick2 = () => {\n    setOpen({ ...open,\n      time: open.time,\n      movie: !open.movie\n    });\n  };\n\n  var formData = new FormData();\n  const requestOptionsFiles = {\n    method: 'POST',\n    body: formData\n  };\n\n  const MyUploader = () => {\n    // specify upload params and url for your files\n    const getUploadParams = _ref => {\n      let {\n        meta\n      } = _ref;\n      return {\n        url: 'http://localhost:8080/MOVIEUPLOAD?ID=' + props.id\n      };\n    }; // called every time a file's `status` changes\n\n\n    const handleChangeStatus = (_ref2, status) => {\n      let {\n        meta,\n        file\n      } = _ref2;\n      console.log(status, meta, file);\n    }; // receives array of files that are done uploading when submit button is clicked\n\n\n    const handleSubmit = (files, allFiles) => {\n      console.log(files.map(f => f.meta));\n      allFiles.forEach(f => f.remove());\n    };\n\n    return /*#__PURE__*/_jsxDEV(Dropzone, {\n      getUploadParams: getUploadParams,\n      onChangeStatus: handleChangeStatus,\n      onSubmit: handleSubmit,\n      accept: \"image/*,audio/*,video/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      '& .MuiTextField-root': {\n        m: 1,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      disabled: login(props.id),\n      onClick: () => {\n        let url = \"http://localhost:8080/FILES?ID=\" + props.id;\n        fetch(url, requestOptionsFiles).then(response => response.json()).then(responseJson => {\n          console.log(responseJson);\n\n          if (responseJson.movie == null && responseJson.time != null) {\n            console.log(responseJson.movie);\n            setFiles({ ...Files,\n              times: responseJson.time,\n              movies: []\n            });\n          } else if (responseJson.movie != null && responseJson.time == null) {\n            console.log(responseJson.time);\n            setFiles({ ...Files,\n              times: [],\n              movies: responseJson.movie\n            });\n          } else if (responseJson.movie != null && responseJson.time != null) {\n            setFiles({ ...Files,\n              times: responseJson.time,\n              movies: responseJson.movie\n            });\n          } else {\n            setFiles({ ...Files,\n              times: [],\n              movies: []\n            });\n          }\n        });\n      },\n      children: \"\\u4E00\\u89A7\\u53D6\\u5F97\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ListItemButton, {\n        onClick: handleClick1,\n        children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: \"TimeStampFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), open.time ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: open.time,\n        timeout: \"auto\",\n        unmountOnExit: true,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          component: \"div\",\n          disablePadding: true,\n          children: Files.times.map(n => /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n        onClick: handleClick2,\n        children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: \"MovieFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), open.movie ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n        in: open.movie,\n        timeout: \"auto\",\n        unmountOnExit: true,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          component: \"div\",\n          disablePadding: true,\n          children: Files.movies.map(n => /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectTextFields, \"WyTsJzP218SYwQ9wNvWRRgpQ2dI=\");\n\n_c = SelectTextFields;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectTextFields\");","map":{"version":3,"sources":["/Users/takumifukuo/go/src/github.com/joryulife/AutoMediaCheckPointWeb/amcp/src/files.tsx"],"names":["React","Box","Button","List","ListItemButton","ListItemText","ExpandLess","ExpandMore","Collapse","Dropzone","login","id","SelectTextFields","props","Files","setFiles","useState","movies","times","open","setOpen","time","movie","handleClick1","console","log","handleClick2","formData","FormData","requestOptionsFiles","method","body","MyUploader","getUploadParams","meta","url","handleChangeStatus","status","file","handleSubmit","files","allFiles","map","f","forEach","remove","m","width","message","fetch","then","response","json","responseJson","n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;;;AAEA,SAASC,KAAT,CAAgBC,EAAhB,EAA2B;AACvB,MAAGA,EAAE,KAAG,EAAR,EAAW;AACP,WAAO,KAAP;AACH,GAFD,MAEK;AACD,WAAO,IAAP;AACH;AACJ;;AACD,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAqC;AAAA;;AAChD,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBf,KAAK,CAACgB,QAAN,CAAe;AACpCC,IAAAA,MAAM,EAAG,EAD2B;AAEpCC,IAAAA,KAAK,EAAI;AAF2B,GAAf,CAAzB;AAIA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,KAAK,CAACgB,QAAN,CAAe;AACnCK,IAAAA,IAAI,EAAG,KAD4B;AAEnCC,IAAAA,KAAK,EAAG;AAF2B,GAAf,CAAxB;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAC,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AAEJE,MAAAA,IAAI,EAAG,CAACF,IAAI,CAACE,IAFT;AAGJC,MAAAA,KAAK,EAAGH,IAAI,CAACG;AAHT,KAAD,CAAP;AAKAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACH,GARD;;AASA,QAAMO,YAAY,GAAG,MAAM;AACvBN,IAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AAEJE,MAAAA,IAAI,EAAGF,IAAI,CAACE,IAFR;AAGJC,MAAAA,KAAK,EAAG,CAACH,IAAI,CAACG;AAHV,KAAD,CAAP;AAKH,GAND;;AAOA,MAAIK,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACA,QAAMC,mBAAmB,GAAE;AACvBC,IAAAA,MAAM,EAAE,MADe;AAEvBC,IAAAA,IAAI,EAAEJ;AAFiB,GAA3B;;AAIA,QAAMK,UAAU,GAAG,MAAM;AACrB;AACA,UAAMC,eAAe,GAAG,QAAc;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AAAE,aAAO;AAAEC,QAAAA,GAAG,EAAE,0CAAwCtB,KAAK,CAACF;AAArD,OAAP;AAAkE,KAA1G,CAFqB,CAIrB;;;AACA,UAAMyB,kBAAkB,GAAG,QAAiBC,MAAjB,KAA4B;AAAA,UAA3B;AAAEH,QAAAA,IAAF;AAAQI,QAAAA;AAAR,OAA2B;AAAEd,MAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ,EAAoBH,IAApB,EAA0BI,IAA1B;AAAiC,KAA1F,CALqB,CAOrB;;;AACA,UAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtCjB,MAAAA,OAAO,CAACC,GAAR,CAAYe,KAAK,CAACE,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACT,IAAjB,CAAZ;AACAO,MAAAA,QAAQ,CAACG,OAAT,CAAiBD,CAAC,IAAIA,CAAC,CAACE,MAAF,EAAtB;AACH,KAHD;;AAIA,wBACI,QAAC,QAAD;AACI,MAAA,eAAe,EAAEZ,eADrB;AAEI,MAAA,cAAc,EAAEG,kBAFpB;AAGI,MAAA,QAAQ,EAAEG,YAHd;AAII,MAAA,MAAM,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GApBD;;AAsBA,sBACI,QAAC,GAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,EAAE,EAAE;AACA,8BAAwB;AAAEO,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,KAAK,EAAE;AAAf;AADxB,KAFR;AAKI,IAAA,UAAU,MALd;AAMI,IAAA,YAAY,EAAC,KANjB;AAAA,4BAQI;AAAA,gBAAIlC,KAAK,CAACmC;AAAV;AAAA;AAAA;AAAA;AAAA,YARJ,eASI,QAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,QAAQ,EAAEtC,KAAK,CAACG,KAAK,CAACF,EAAP,CAFnB;AAGI,MAAA,OAAO,EAAE,MAAI;AACT,YAAIwB,GAAG,GAAG,oCAAkCtB,KAAK,CAACF,EAAlD;AACAsC,QAAAA,KAAK,CAACd,GAAD,EAAKN,mBAAL,CAAL,CACCqB,IADD,CACOC,QAAD,IAAaA,QAAQ,CAACC,IAAT,EADnB,EAECF,IAFD,CAEOG,YAAD,IAAiB;AACnB7B,UAAAA,OAAO,CAACC,GAAR,CAAY4B,YAAZ;;AACA,cAAGA,YAAY,CAAC/B,KAAb,IAAsB,IAAtB,IAA8B+B,YAAY,CAAChC,IAAb,IAAqB,IAAtD,EAA2D;AACvDG,YAAAA,OAAO,CAACC,GAAR,CAAY4B,YAAY,CAAC/B,KAAzB;AACAP,YAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELI,cAAAA,KAAK,EAAGmC,YAAY,CAAChC,IAFhB;AAGLJ,cAAAA,MAAM,EAAG;AAHJ,aAAD,CAAR;AAKH,WAPD,MAOM,IAAGoC,YAAY,CAAC/B,KAAb,IAAsB,IAAtB,IAA8B+B,YAAY,CAAChC,IAAb,IAAqB,IAAtD,EAA2D;AAC7DG,YAAAA,OAAO,CAACC,GAAR,CAAY4B,YAAY,CAAChC,IAAzB;AACAN,YAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELI,cAAAA,KAAK,EAAG,EAFH;AAGLD,cAAAA,MAAM,EAAGoC,YAAY,CAAC/B;AAHjB,aAAD,CAAR;AAKH,WAPK,MAOA,IAAG+B,YAAY,CAAC/B,KAAb,IAAsB,IAAtB,IAA8B+B,YAAY,CAAChC,IAAb,IAAqB,IAAtD,EAA2D;AAC7DN,YAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELI,cAAAA,KAAK,EAAGmC,YAAY,CAAChC,IAFhB;AAGLJ,cAAAA,MAAM,EAAGoC,YAAY,CAAC/B;AAHjB,aAAD,CAAR;AAKH,WANK,MAMD;AACDP,YAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELI,cAAAA,KAAK,EAAG,EAFH;AAGLD,cAAAA,MAAM,EAAG;AAHJ,aAAD,CAAR;AAKH;AACJ,SA/BD;AAgCH,OArCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAkDI;AAAA,8BACI,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAEM,YAAzB;AAAA,gCACI,QAAC,YAAD;AAAc,UAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKJ,IAAI,CAACE,IAAL,gBAAY,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAAZ,gBAA6B,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAFlC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKQ,QAAC,QAAD;AAAU,QAAA,EAAE,EAAEF,IAAI,CAACE,IAAnB;AAAyB,QAAA,OAAO,EAAC,MAAjC;AAAwC,QAAA,aAAa,MAArD;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,KAAhB;AAAsB,UAAA,cAAc,MAApC;AAAA,oBACKP,KAAK,CAACI,KAAN,CAAYwB,GAAZ,CAAiBY,CAAD,iBACb,QAAC,YAAD;AAAc,YAAA,OAAO,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALR,eAYI,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAE5B,YAAzB;AAAA,gCACI,QAAC,YAAD;AAAc,UAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKP,IAAI,CAACG,KAAL,gBAAa,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAAb,gBAA8B,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAFnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,eAgBQ,QAAC,QAAD;AAAU,QAAA,EAAE,EAAEH,IAAI,CAACG,KAAnB;AAA0B,QAAA,OAAO,EAAC,MAAlC;AAAyC,QAAA,aAAa,MAAtD;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,KAAhB;AAAsB,UAAA,cAAc,MAApC;AAAA,oBACKR,KAAK,CAACG,MAAN,CAAayB,GAAb,CAAkBY,CAAD,iBACd,QAAC,YAAD;AAAc,YAAA,OAAO,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAhBR;AAAA;AAAA;AAAA;AAAA;AAAA,YAlDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6EH;;GAjIuB1C,gB;;KAAAA,gB","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { Button } from '@mui/material';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport Collapse from '@mui/material/Collapse';\nimport 'react-dropzone-uploader/dist/styles.css'\nimport Dropzone from 'react-dropzone-uploader'\n\nfunction login (id:string) {\n    if(id!==\"\"){\n        return false\n    }else{\n        return true\n    }\n}\nexport default function SelectTextFields(props:any) {\n    const [Files,setFiles] = React.useState({\n        movies : [],\n        times  : []\n    });\n    const [open, setOpen] = React.useState({\n        time : false,\n        movie : false\n    });\n    const handleClick1 = () => {\n        console.log(open);\n        setOpen({\n            ...open,\n            time : !open.time,\n            movie : open.movie\n        });\n        console.log(open);\n    };\n    const handleClick2 = () => {\n        setOpen({\n            ...open,\n            time : open.time,\n            movie : !open.movie\n        });\n    };\n    var formData = new FormData\n    const requestOptionsFiles ={\n        method: 'POST',\n        body: formData\n    };\n    const MyUploader = () => {\n        // specify upload params and url for your files\n        const getUploadParams = ({ meta }) => { return { url: 'http://localhost:8080/MOVIEUPLOAD?ID='+props.id } }\n        \n        // called every time a file's `status` changes\n        const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n        \n        // receives array of files that are done uploading when submit button is clicked\n        const handleSubmit = (files, allFiles) => {\n            console.log(files.map(f => f.meta))\n            allFiles.forEach(f => f.remove())\n        }\n        return (\n            <Dropzone\n                getUploadParams={getUploadParams}\n                onChangeStatus={handleChangeStatus}\n                onSubmit={handleSubmit}\n                accept=\"image/*,audio/*,video/*\"\n            />\n        )\n    }\n\n    return (\n        <Box\n            component=\"form\"\n            sx={{\n                '& .MuiTextField-root': { m: 1, width: '25ch' },\n            }}\n            noValidate\n            autoComplete=\"off\"\n        >\n            <p>{props.message}</p>\n            <Button\n                variant=\"contained\"\n                disabled={login(props.id)}\n                onClick={()=>{\n                    let url = \"http://localhost:8080/FILES?ID=\"+props.id\n                    fetch(url,requestOptionsFiles)\n                    .then((response)=> response.json())\n                    .then((responseJson) =>{\n                        console.log(responseJson);\n                        if(responseJson.movie == null && responseJson.time != null){\n                            console.log(responseJson.movie);\n                            setFiles({\n                                ...Files,\n                                times : responseJson.time,\n                                movies : []\n                            })\n                        }else if(responseJson.movie != null && responseJson.time == null){\n                            console.log(responseJson.time);\n                            setFiles({\n                                ...Files,\n                                times : [],\n                                movies : responseJson.movie\n                            })\n                        }else if(responseJson.movie != null && responseJson.time != null){\n                            setFiles({\n                                ...Files,\n                                times : responseJson.time,\n                                movies : responseJson.movie\n                            })\n                        }else{\n                            setFiles({\n                                ...Files,\n                                times : [],\n                                movies : []\n                            })\n                        }\n                    })\n                }}\n            >\n                一覧取得\n            </Button>\n            <div>\n                <ListItemButton onClick={handleClick1}>\n                    <ListItemText primary=\"TimeStampFile\" />\n                    {open.time ? <ExpandLess /> : <ExpandMore />}\n                </ListItemButton>\n                    <Collapse in={open.time} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            {Files.times.map((n)=>(\n                                <ListItemText primary={n} />\n                            ))}\n                        </List>\n                    </Collapse>\n                <ListItemButton onClick={handleClick2}>\n                    <ListItemText primary=\"MovieFile\" />\n                    {open.movie ? <ExpandLess /> : <ExpandMore />}\n                </ListItemButton>\n                    <Collapse in={open.movie} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            {Files.movies.map((n)=>(\n                                <ListItemText primary={n} />\n                            ))}\n                        </List>\n                    </Collapse>\n            </div>\n        </Box>\n    );\n}"]},"metadata":{},"sourceType":"module"}